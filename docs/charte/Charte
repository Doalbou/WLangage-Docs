# üî¨ Convention de nommage WLangage (compl√®te)

Cette charte regroupe l‚Äôensemble des conventions de nommage, bonnes pratiques de code, structuration des proc√©dures et performances √† respecter pour garantir un d√©veloppement homog√®ne, lisible et maintenable dans un projet WinDev / WLangage.

---

## üìå Bonnes pratiques compl√®tes (WLangage / WinDev)

### ü•á Fondamentaux

- Toujours d√©clarer **toutes les variables** en **d√©but de proc√©dure**, regroup√©es par type si possible.
- Toujours **initialiser chaque variable**, m√™me simple :
  ```wlangage
  cW_Texte ‚Üê ""
  ```
- Les **proc√©dures internes** doivent toujours √™tre plac√©es √† la **fin** de la proc√©dure principale.
- Une **proc√©dure = une seule responsabilit√©** : √©viter les effets de bord et les traitements multiples.
- Ne jamais utiliser `Null` sans avoir **initialis√© correctement** la variable avant.
- Toujours utiliser un **nom au pluriel** :
  - Pour les **tableaux** : `tsF_Lignes`, `tcW_Articles`
  - Pour les **proc√©dures** retournant plusieurs √©l√©ments : `ListeFactures`, `ObtenirArticles`
- La **structure li√©e √† un tableau** doit √™tre au singulier : `strF_Produit` pour `tsF_Produits`
- **Les noms de structures et d‚Äô√©num√©rations** doivent √™tre explicites et li√©s √† leur domaine fonctionnel :  
  `strF_Commande`, `enuG_TypeEtat`
- **Utiliser les √©num√©rations (`enu`)** pour √©viter les valeurs magiques ou num√©riques arbitraires.
- Tous les **composants visuels** doivent avoir un **pr√©fixe IHM clair** :  
  `BTN_Valider`, `SAI_Email`, `TAB_Commandes`
- Regrouper les fonctions m√©tier dans des **collections de proc√©dures** (`COL_`).
- √âviter tout **nom abr√©g√© ou ambigu** dans le code m√©tier.

---

### ü•à Lisibilit√© & coh√©rence

- **Limiter la profondeur des proc√©dures imbriqu√©es**  
  üëâ Utiliser des retours anticip√©s (`RENVOYER`, `SORTIR`)  
  (_aussi appel√© "early return"_)
- **Utiliser des noms clairs pour les proc√©dures**, toujours commencer par un verbe :  
  `CalculerMontant`, `V√©rifierStock`, `InitialiserFen√™tre`
- **Documenter les structures complexes** :
  - Commentaire au-dessus de la `STRUCTURE` pour d√©crire son usage
  - Commentaire √† droite de chaque membre pour sa signification
- **Documenter l‚Äôintention m√©tier des traitements** :  
  Ne pas √©crire `// test`, mais `// V√©rifie si le client est actif`
- **Utiliser les constantes (`const`)** pour les cl√©s fixes, statuts, types d‚Äôop√©ration, messages
- **Op√©rateur ternaire** (affectation conditionnelle lisible) :
  ```wlangage
  cW_Texte = bW_Actif ? "Actif" : "Inactif"
  ```

---

### ü•â Organisation & architecture

- **Isoler les acc√®s HFSQL** dans des proc√©dures d√©di√©es :  
  Exemples : `LireProduitParID`, `EnregistrerCommande`.  
  Ne pas disperser les appels `HLit`, `HRecherche` dans le code m√©tier.
- **√âviter les effets de bord**  
  Une proc√©dure ne doit modifier une variable globale **que si c‚Äôest justifi√©**.  
  Pr√©f√©rer modifier une variable **locale** et la retourner.
- **Nommer les fichiers de proc√©dures et fen√™tres** de mani√®re descriptive :  
  `FEN_SaisieCommande`, `COL_GestionInventaire`
- **Centraliser les messages et erreurs** dans des collections d√©di√©es :  
  `COL_Erreurs`, `COL_MessagesUI`
- **Utiliser les √©v√©nements standards WinDev** (`Initialisation`, `Fin d'affichage`, `Entr√©e dans champ`, etc.) de mani√®re coh√©rente dans tout le projet
- **√âviter l‚Äôusage d‚Äô√©tiquettes (`GOTO`)** sauf cas exceptionnels tr√®s encadr√©s (code g√©n√©r√©, sortie unique)

---

### üõ†Ô∏è Performance & clart√©

- **Optimiser le code** : ne pas cr√©er de **variables interm√©diaires inutiles** si elles ne sont pas n√©cessaires √† la lisibilit√© ou au d√©bogage :

  ```wlangage
  cW_Resultat = (eW_Total > 100) ? "Haut" : "Bas"
  ```

- **Limiter les appels syst√®me redondants**  
  Si une fonction syst√®me (ex. `DateDuJour()`, `NomMachine()`) est utilis√©e plusieurs fois, stocker sa valeur dans une variable temporaire.

- **√âviter les recalculs dans les boucles**  
  D√©placer les calculs invariants en dehors de la boucle :

  ```wlangage
  nLongueur est un entier = Longueur(cW_Cha√Æne)
  POUR i = 1 √Ä 10
      SI i < nLongueur ALORS ...
  ```

- **Privil√©gier les comparaisons num√©riques aux cha√Ænes**  
  Les entiers sont plus rapides et plus s√ªrs :

  ```wlangage
  SI nW_Type = 1 // plut√¥t que SI cW_Type = "Client"
  ```

- **OUVRIR et Fermer syst√©matiquement les fichiers ou connexions avant et apr√®s usage**  
  M√™me si WinDev les g√®re automatiquement, le faire manuellement am√©liore la stabilit√© :

  ```wlangage
  HFerme(FIC_Produits)
  ```

- **Limiter la surcharge d'affichage**  
  √âviter de rafra√Æchir une table ou une fen√™tre √† chaque micro-modification :
  ```wlangage
  TableAffiche(TAB_Produits, taReAffiche) // uniquement apr√®s une vraie modification
  ```

---

### üîÅ Convention de retour standardis√©e pour les proc√©dures

- **Structure syst√©matique recommand√©e** :

  ```wlangage
  bW_Retour est un bool√©en = Faux   // Bool√©en de succ√®s ou d'√©chec
  cW_Retour est une cha√Æne = ""     // Message d'erreur ou d'information
  vW_Retour est un Variant = Null   // Valeur ou objet de retour si multiple (optionnel)
  ```

- **Appel type** :

  ```wlangage
  (bW_Retour, cW_Retour, vW_Retour) = Pg_Batch_GET_AccessToken(cP_BIB, cP_GGS)
  SI bW_Retour = Faux ALORS RENVOYER (bW_Retour, cW_Retour, "")
  ```

- **Exemple r√©sum√© de proc√©dure** :

  ```wlangage
  PROC√âDURE CPg_Batch_RecupereStatistique(cP_BIB est une cha√Æne, cP_GGS est une cha√Æne, cP_BatchID est une cha√Æne)

  bW_Retour est un bool√©en = Faux
  cW_Retour est une cha√Æne = ""
  cW_Info est une cha√Æne = ""

  (bW_Retour, cW_Retour) = Pg_Batch_GET_AccessToken(cP_BIB, cP_GGS)
  SI bW_Retour = Faux ALORS RENVOYER (bW_Retour, cW_Retour, "")

  (bW_Retour, cW_Retour) = Pg_Batch_GET_Statistics(cP_BatchID)
  SI bW_Retour = Faux ALORS RENVOYER (bW_Retour, cW_Retour, "")

  // Traitement des donn√©es...
  RENVOYER (Vrai, "", cW_Info)
  ```

  üëâ Cette structure garantit clart√©, robustesse, standardisation du flux de retour et gestion propre des erreurs.

---

## üî† Types de donn√©es (pr√©fixes)

| Type                       | Pr√©fixe   |
| -------------------------- | --------- |
| Avanc√©                     | `a`       |
| Avanc√© dynamique           | `ad`      |
| Bool√©en                    | `b`       |
| Buffer                     | `bf`      |
| Caract√®re                  | `c`       |
| Cha√Æne (g√©n√©rique)         | `c`       |
| Cha√Æne ANSI                | `ca`      |
| Cha√Æne ASCIIZ              | `caz`     |
| Cha√Æne fixe                | `cf`      |
| Cha√Æne Pascal              | `cp`      |
| Cha√Æne Unicode             | `cu`      |
| Champ                      | `C`       |
| Combinaison                | `comb`    |
| Connexion HFSQL            | `cnx`     |
| Date                       | `d`       |
| DateHeure                  | `dh`      |
| Description fichier HFSQL  | `df`      |
| Description liaison HFSQL  | `dl`      |
| Description rubrique HFSQL | `dr`      |
| Dur√©e                      | `du`      |
| Entier                     | `e`       |
| Entier syst√®me             | `es`      |
| Entier 1 octet             | `e1`      |
| Entier 2 octets            | `e2`      |
| Entier 4 octets            | `es4`     |
| Entier 8 octets            | `e8`      |
| √ânum√©ration                | `enu`     |
| Heure                      | `h`       |
| Interface                  | `int`     |
| Mon√©taire                  | `mo`      |
| Mot de passe s√©curis√©      | `mdp`     |
| Num√©rique (r√©el)           | `n`       |
| Objet WinDev               | `ob`      |
| Objet .NET                 | `obd`     |
| Objet WebService           | `obw`     |
| Objet WinDev + .NET        | `obwd`    |
| Objet Automation           | `oba`     |
| Objet Automation dynamique | `obad`    |
| Objet dynamique non typ√©   | `obdnt`   |
| Param√®tre sans type        | `p`       |
| Police                     | `pol`     |
| Proc√©dure                  | `proc`    |
| Rectangle                  | ‚Äî         |
| R√©el                       | `r`       |
| R√©el 4 octets              | `r4`      |
| Requ√™te                    | `rq`      |
| Source de donn√©es          | `sd`      |
| Structure                  | `str`     |
| Structure dynamique        | `strd`    |
| Tableau                    | `t`       |
| Tableau associatif         | `ta`      |
| Tableau dynamique          | `td`      |
| Tableau fixe               | `tf`      |
| UUID 128 bits              | `uuid128` |
| UUID 256 bits              | `uuid256` |
| Variable compos√©e          | `vc`      |
| Variant                    | `v`       |

---

## üåç Port√©es (suffixes)

| Port√©e                 | Suffixe |
| ---------------------- | ------- |
| Membre de structure    | `MS_`   |
| Membre instance classe | `M_`    |
| Membre global classe   | `MG_`   |
| Propri√©t√© d‚Äôobjet      | `P_`    |
| Propri√©t√© globale      | `PG_`   |
| Globale collection     | `G`     |
| Globale fen√™tre        | `F`     |
| Globale test groupe    | `GT`    |
| Globale liste de tests | `LT`    |
| Globale page           | `PA`    |
| Globale plan d‚Äôaction  | `PL`    |
| Globale projet         | `G`     |
| Globale test           | `T`     |
| Globale √©tat           | `E`     |
| Locale proc√©dure       | `W`     |

---

## üß© Composants IHM (fen√™tres et pages)

| Composant       | Pr√©fixe                        |
| --------------- | ------------------------------ |
| Bouton          | `BTN_`                         |
| Champ de saisie | `SAI_`                         |
| Libell√©         | `LIB_`                         |
| Table           | `TAB_`                         |
| Colonne         | `COL_`                         |
| Combo           | `COM_`                         |
| Zone r√©p√©t√©e    | `ZR_`                          |
| Onglet          | `ONG_`                         |
| Image           | `IMG_`                         |
| Jauge           | `JAU_`                         |
| Planning        | `PLN_`                         |
| Graphe          | `GRF_`                         |
| Superchamp      | `SC_`                          |
| Arbre           | `ARB_`                         |
| Upload          | `UPL_`                         |
| HTML            | `EDHTML_`, `LIBHTML_`, `HTML_` |
| Zone multiligne | `ZM_`                          |
| Checkbox        | `CHK_`                         |
| Radio           | `RAD_`                         |
| Interrupteur    | `INT_`                         |
| Menu            | `MENU_`                        |
| Option          | `OPT_`                         |
| Page WebDev     | `PAGE_`                        |
| Page Interne    | `PI_`                          |
| Popup           | `POPUP_`                       |
| √âtat            | `ETAT_`                        |
| Tableur         | `TBLR_`                        |
| Graphe          | `GRF_`                         |

---

## üèóÔ∏è √âl√©ments projet

| √âl√©ment                      | Pr√©fixe    |
| ---------------------------- | ---------- |
| Classe                       | `C`        |
| Collection proc√©dures WinDev | `COL_`     |
| Collection proc√©dures WebDev | `NAV_`     |
| Webservice                   | `WS_`      |
| Fen√™tre                      | `FEN_`     |
| Fen√™tre interne              | `FI_`      |
| Page WebDev                  | `PAGE_`    |
| Page Interne                 | `PI_`      |
| Requ√™te                      | `REQ_`     |
| √âtat                         | `ETAT_`    |
| Mod√®le d'√©tat                | `ETATMOD_` |
| Image                        | `PIC_`     |
| Test                         | `TEST_`    |
| T√©l√©m√©trie                   | `TLM_`     |

---
